{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["options","audioLists","name","singer","cover","musicSrc","Promise","resolve","theme","defaultPosition","top","left","App","useState","selectedFile","setSelectedFile","loaded","setLoaded","className","method","action","id","type","multiple","onChange","event","console","log","target","files","onClick","Swal","fire","title","text","icon","file","formData","FormData","append","axios","post","headers","onSubmit","then","res","data","showCancelButton","confirmButtonColor","cancelButtonColor","cancelButtonText","confirmButtonText","result","value","timer","dismiss","DismissReason","cancel","catch","err","loading","src","width","height","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wOAqDMA,G,OAAU,CAEdC,WA/CiB,CACjB,CACEC,KAAM,eACNC,OAAQ,qBACRC,MAAO,6BACPC,SAAU,iCAEZ,CACEH,KAAM,YACNC,OAAQ,aACRC,MACE,gFACFC,SAAU,WACR,OAAOC,QAAQC,QACb,iHAIN,CACEL,KAAM,kBACNC,OAAQ,WACRC,MACE,sFACFC,SACE,gFAEJ,CACEH,KAAM,kBACNC,OAAQ,kBACRC,MACE,6GACFC,SAAU,WACR,OAAOC,QAAQC,QACb,oHAIN,CACEL,KAAM,eACNC,OAAQ,qBACRC,MAAO,6BACPC,SAAU,+BAOZG,MAAO,QACPC,gBAAiB,CACfC,IAAK,IACLC,KAAM,QAkGKC,MA9Ff,WAAiB,IAAD,EAC0BC,mBAAS,MADnC,mBACPC,EADO,KACOC,EADP,OAEcF,mBAAS,GAFvB,mBAEPG,EAFO,KAECC,EAFD,KAsEd,OACE,yBAAKC,UAAU,aACb,2FACA,yBAAKA,UAAU,YACb,yBAAKA,UAAU,cACb,0BAAMC,OAAO,OAAOC,OAAO,IAAIC,GAAG,KAEhC,yBAAKH,UAAU,oBACb,sDACA,2BAAOI,KAAK,OAAOJ,UAAU,eAAeK,SAAS,GAAGC,SA3E5C,SAACC,GACvBC,QAAQC,IAAIF,EAAMG,OAAOC,MAAM,IAC/Bd,EAAgBU,EAAMG,OAAOC,MAAM,OA0EzB,4BAAQP,KAAK,SAASJ,UAAU,4BAA4BY,QAzDjD,WAChBhB,GACHiB,IAAKC,KAAK,CACRC,MAAO,aACPC,KAAM,yCACNC,KAAM,UAKVlB,EAAU,GAvBK,SAACmB,GAChB,IACMC,EAAW,IAAIC,IACrBD,EAASE,OAAO,QAASH,GAOzB,OAAOI,IAAMC,KATD,0DASWJ,EALR,CACbK,QAAS,CACP,eAAgB,yBAkBpBC,CAAS7B,GAAc8B,MAAK,SAACC,GAC3Bd,IAAKC,KAAK,CACRC,MAAO,4CACPC,KAAM,yDAAqCW,EAAIC,KAC/CX,KAAM,UACNY,kBAAkB,EAClBC,mBAAoB,UACpBC,kBAAmB,OACnBC,iBAAkB,SAClBC,kBAAmB,yBAClBP,MAAK,SAACQ,GACHA,EAAOC,MACTtB,IAAKC,KAAK,CACRC,MAAO,GACPC,KAAM,0DACNC,KAAM,UACNmB,MAAO,MAGTF,EAAOG,UAAYxB,IAAKyB,cAAcC,QAEtC1B,IAAKC,KAAK,CACRC,MAAO,eACPC,KAAM,IACNC,KAAM,UACNmB,MAAO,SAGVI,OAAM,SAACC,GACR1C,EAAU,GACVS,QAAQC,IAAIgC,UAe+EC,QAAS5C,GAA9F,aAKN,yBAAKE,UAAU,cACb,yBAAK2C,IAAI,eAAeC,MAAM,MAAMC,OAAO,MAAMC,IAAI,UAEvD,kBAAC,IAAuBhE,MC3IZiE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,iB","file":"static/js/main.d5eece4c.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './App.css'\nimport axios from 'axios'\nimport FormData from 'form-data'\nimport Swal from 'sweetalert2'\nimport ReactJkMusicPlayer from 'react-jinke-music-player'\nimport 'react-jinke-music-player/assets/index.css'\n\nconst audioList1 = [\n  {\n    name: '高尚',\n    singer: '薛之谦',\n    cover: '//cdn.lijinke.cn/nande.jpg',\n    musicSrc: '//cdn.lijinke.cn/gaoshang.mp3'\n  },\n  {\n    name: 'Despacito',\n    singer: 'Luis Fonsi',\n    cover:\n      'http://res.cloudinary.com/alick/image/upload/v1502689731/Despacito_uvolhp.jpg',\n    musicSrc: () => {\n      return Promise.resolve(\n        'http://res.cloudinary.com/alick/video/upload/v1502689683/Luis_Fonsi_-_Despacito_ft._Daddy_Yankee_uyvqw9.mp3'\n      )\n    }\n  },\n  {\n    name: 'Bedtime Stories',\n    singer: 'Jay Chou',\n    cover:\n      'http://res.cloudinary.com/alick/image/upload/v1502375978/bedtime_stories_bywggz.jpg',\n    musicSrc:\n      'http://res.cloudinary.com/alick/video/upload/v1502375674/Bedtime_Stories.mp3'\n  },\n  {\n    name: 'Dorost Nemisham',\n    singer: 'Sirvan Khosravi',\n    cover:\n      'https://res.cloudinary.com/ehsanahmadi/image/upload/v1573758778/Sirvan-Khosravi-Dorost-Nemisham_glicks.jpg',\n    musicSrc: () => {\n      return Promise.resolve(\n        'https://res.cloudinary.com/ehsanahmadi/video/upload/v1573550770/Sirvan-Khosravi-Dorost-Nemisham-128_kb8urq.mp3'\n      )\n    }\n  },\n  {\n    name: '难得',\n    singer: '安来宁',\n    cover: '//cdn.lijinke.cn/nande.jpg',\n    musicSrc: '//cdn.lijinke.cn/nande.mp3'\n  }\n]\n\nconst options = {\n  // audio lists model\n  audioLists: audioList1,\n  theme: 'light',\n  defaultPosition: {\n    top: 500,\n    left: 1100\n  }\n}\n\nfunction App () {\n  const [selectedFile, setSelectedFile] = useState(null)\n  const [loaded, setLoaded] = useState(0)\n\n  const onChangeHandler = (event) => {\n    console.log(event.target.files[0])\n    setSelectedFile(event.target.files[0])\n    // setLoaded(1)\n  }\n\n  const onSubmit = (file) => {\n    const url = 'https://strapi-tungtung.herokuapp.com/questions/counter'\n    const formData = new FormData()\n    formData.append('files', file)\n\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    }\n    return axios.post(url, formData, config)\n  }\n\n  const onClickHandler = () => {\n    if (!selectedFile) {\n      Swal.fire({\n        title: '#ngungoc ?',\n        text: 'Cam cần để file vào.',\n        icon: 'error'\n      })\n      // return\n    }\n\n    setLoaded(1)\n\n    onSubmit(selectedFile).then((res) => {\n      Swal.fire({\n        title: 'Đã ngồi đếm xong !',\n        text: 'Số câu hỏi trong file là là là: ' + res.data,\n        icon: 'success',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#aaa',\n        cancelButtonText: 'Ờ',\n        confirmButtonText: 'Cảm ơn nha'\n      }).then((result) => {\n        if (result.value) {\n          Swal.fire({\n            title: '',\n            text: 'Tiền đếm tay của bé ba chăm',\n            icon: 'success',\n            timer: 3000\n          })\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          Swal.fire({\n            title: 'Okay fine :)',\n            text: ' ',\n            icon: 'warning',\n            timer: 3000\n          })\n        }\n      }).catch((err) => {\n        setLoaded(0)\n        console.log(err)\n      })\n    })\n  }\n\n  return (\n    <div className='container'>\n      <h1>Đếm câu hỏi cho vui - chính xác 99%</h1>\n      <div className='flex-row'>\n        <div className='flex-large'>\n          <form method='post' action='#' id='#'>\n\n            <div className='form-group files'>\n              <label>Upload Cam 's File </label>\n              <input type='file' className='form-control' multiple='' onChange={onChangeHandler} />\n              <button type='button' className='btn btn-success btn-block' onClick={onClickHandler} loading={loaded}>Upload</button>\n            </div>\n\n          </form>\n        </div>\n        <div className='flex-large'>\n          <img src='wallLeft.jpg' width='500' height='600' alt='Wall' />\n        </div>\n        <ReactJkMusicPlayer {...options} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}