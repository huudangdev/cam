{"version":3,"sources":["components/MusicPlayer.js","components/UploadFile.js","components/FileTable.js","App.js","serviceWorker.js","index.js"],"names":["audioList1","name","singer","cover","musicSrc","Promise","resolve","MusicPlayer","props","options","audioLists","theme","defaultPosition","top","left","autoPlay","auto","optionsLoading","type","color","height","width","UploadFile","onChangeFile","onSubmit","onAnalyticFile","useState","selectedFile","setSelectedFile","loading","setLoading","console","log","method","action","id","className","multiple","accept","onChange","event","target","files","onClick","Swal","fire","title","text","icon","then","res","data","showCancelButton","confirmButtonColor","cancelButtonColor","cancelButtonText","confirmButtonText","result","value","questions","timer","dismiss","DismissReason","cancel","catch","err","FileTable","editRow","deleteRow","length","map","file","index","key","colSpan","App","setFiles","formData","FormData","append","axios","post","headers","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a680910.chunk.js","sourcesContent":["import React from 'react'\nimport ReactJkMusicPlayer from 'react-jinke-music-player'\nimport 'react-jinke-music-player/assets/index.css'\n\nconst audioList1 = [\n  {\n    name: '高尚',\n    singer: '薛之谦',\n    cover: '//cdn.lijinke.cn/nande.jpg',\n    musicSrc: '//cdn.lijinke.cn/gaoshang.mp3'\n  },\n  {\n    name: 'Despacito',\n    singer: 'Luis Fonsi',\n    cover:\n      'http://res.cloudinary.com/alick/image/upload/v1502689731/Despacito_uvolhp.jpg',\n    musicSrc: () => {\n      return Promise.resolve(\n        'http://res.cloudinary.com/alick/video/upload/v1502689683/Luis_Fonsi_-_Despacito_ft._Daddy_Yankee_uyvqw9.mp3'\n      )\n    }\n  },\n  {\n    name: 'Bedtime Stories',\n    singer: 'Jay Chou',\n    cover:\n      'http://res.cloudinary.com/alick/image/upload/v1502375978/bedtime_stories_bywggz.jpg',\n    musicSrc:\n      'http://res.cloudinary.com/alick/video/upload/v1502375674/Bedtime_Stories.mp3'\n  },\n  {\n    name: 'Dorost Nemisham',\n    singer: 'Sirvan Khosravi',\n    cover:\n      'https://res.cloudinary.com/ehsanahmadi/image/upload/v1573758778/Sirvan-Khosravi-Dorost-Nemisham_glicks.jpg',\n    musicSrc: () => {\n      return Promise.resolve(\n        'https://res.cloudinary.com/ehsanahmadi/video/upload/v1573550770/Sirvan-Khosravi-Dorost-Nemisham-128_kb8urq.mp3'\n      )\n    }\n  },\n  {\n    name: '难得',\n    singer: '安来宁',\n    cover: '//cdn.lijinke.cn/nande.jpg',\n    musicSrc: '//cdn.lijinke.cn/nande.mp3'\n  }\n]\n\nconst MusicPlayer = (props) => {\n  const options = {\n    // audio lists model\n    audioLists: audioList1,\n    theme: props.theme,\n    defaultPosition: {\n      top: props.top,\n      left: props.left\n    },\n    autoPlay: props.auto\n  }\n\n  return (\n    <>\n      <ReactJkMusicPlayer {...options} />\n    </>\n  )\n}\n\nexport default MusicPlayer\n","import React, { useState } from 'react'\nimport Swal from 'sweetalert2'\nimport ReactLoading from 'react-loading'\n\nconst optionsLoading = {\n  type: 'cylon',\n  color: '#000000',\n  height: 200,\n  width: 100\n}\n\nconst UploadFile = ({ onChangeFile, onSubmit, onAnalyticFile }) => {\n  const [selectedFile, setSelectedFile] = useState(null)\n  const [loading, setLoading] = useState(0)\n\n  const onChangeHandler = (event) => {\n    setSelectedFile(event.target.files[0])\n    onChangeFile(event.target.files[0])\n  }\n\n  const onClickHandler = () => {\n    if (!selectedFile) {\n      Swal.fire({\n        title: 'Wrong!',\n        text: 'Cần để file vào.',\n        icon: 'error'\n      })\n    }\n\n    setLoading(1)\n\n    onSubmit(selectedFile).then((res) => {\n      setLoading(0)\n      Swal.fire({\n        title: 'Success',\n        text: 'Số câu hỏi trong file là: ' + res.data,\n        icon: 'success',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#aaa',\n        cancelButtonText: 'Huỷ',\n        confirmButtonText: 'Cập nhật'\n      }).then((result) => {\n        if (result.value) {\n          onAnalyticFile({ name: selectedFile.name, questions: res.data })\n          Swal.fire({\n            title: '',\n            text: 'Done',\n            icon: 'success',\n            timer: 3000\n          })\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          Swal.fire({\n            title: 'Đã huỷ',\n            text: ' ',\n            icon: 'warning',\n            timer: 3000\n          })\n        }\n      }).catch((err) => {\n        setLoading(0)\n        console.log(err)\n      })\n    })\n  }\n  console.log(loading)\n  if (loading) {\n    return (\n      <>\n        <form method='post' action='#' id='#'>\n          <div className='form-group files'>\n            <label>UPLOAD YOUR FILE</label>\n            <ReactLoading {...optionsLoading} />\n          </div>\n        </form>\n      </>\n    )\n  } else {\n    return (\n      <>\n        <form method='post' action='#' id='#'>\n          <div className='form-group files'>\n            <label>UPLOAD YOUR FILE</label>\n            <input type='file' className='form-control' multiple='' accept='.pdf' onChange={onChangeHandler} />\n            <button type='button' className='btn btn-success btn-block' onClick={onClickHandler}>Upload</button>\n          </div>\n        </form>\n      </>\n    )\n  }\n}\n\nexport default UploadFile\n","import React from 'react'\n// display\nconst FileTable = ({ files, editRow, deleteRow }) => {\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>FILENAME</th>\n          <th>TOTAL</th>\n          <th>ACTION</th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          (files.length > 0) ? (\n            files.map((file, index) => (\n              <tr key={index}>\n                <td>{file.name}</td>\n                <td>{file.questions}</td>\n                <td>\n                  <button\n                    className='button muted-button'\n                    onClick={() => {\n                      editRow(file)\n                    }}\n                  >\n                                Edit\n                  </button>\n                  <button\n                    className='button muted-button'\n                    onClick={() => deleteRow(file.id)}\n                  >\n                                Delete\n                  </button>\n                </td>\n              </tr>\n            ))\n          ) : (\n            <tr>\n              <td colSpan={3}>No files</td>\n            </tr>\n          )\n        }\n      </tbody>\n    </table>\n  )\n}\n\nexport default FileTable\n","import React, { useState } from 'react'\nimport axios from 'axios'\nimport FormData from 'form-data'\nimport './App.css'\n\nimport MusicPlayer from './components/MusicPlayer'\nimport UploadFile from './components/UploadFile'\nimport FileTable from './components/FileTable'\n\nfunction App () {\n  const [files, setFiles] = useState([])\n\n  // async function run () {\n  //   // Load and plot the original input data that we are going to train on.\n  //   const values = files.map(d => ({\n  //     x: d.level,\n  //     y: d.questions\n  //   }))\n  //   tfvis.render.scatterplot(\n  //     { name: 'No.of level & questions' },\n  //     { values },\n  //     {\n  //       xLabel: 'No. of Level',\n  //       yLabel: 'Questions',\n  //       height: 300\n  //     }\n  //   )\n  //   // More code will be added below\n  // }\n\n  const onChangeFile = (file) => {\n  }\n\n  const onAnalyticFile = (file) => {\n    // if (files.length > 0) files.pop()\n    setFiles([...files, file])\n    // const totalQuestions = files.reduce((accumulator, currentValue) => accumulator + currentValue.questions)\n    // setFiles([...files, { name: 'Tổng cộng', questions: totalQuestions }])\n  }\n\n  const onSubmit = (file) => {\n    const url = 'https://strapi-tungtung.herokuapp.com/questions/counter'\n    const formData = new FormData()\n    formData.append('files', file)\n\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    }\n    return axios.post(url, formData, config)\n  }\n\n  const deleteRow = id => {\n    setFiles(files.filter(file => file.id !== id))\n  }\n  console.log(files)\n\n  return (\n    <>\n      <div className='container'>\n        <div className='flex-row'>\n          <div className='flex-large'>\n            <UploadFile onChangeFile={onChangeFile} onSubmit={onSubmit} onAnalyticFile={onAnalyticFile} />\n          </div>\n          <div className='flex-large'>\n            <label>ANALYTICS</label>\n            <FileTable files={files} deleteRow={deleteRow} />\n          </div>\n          <MusicPlayer theme='light' top={500} left={50} auto={false} />\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}